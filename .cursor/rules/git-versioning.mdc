---
alwaysApply: true
---

# Git Versioning & Branch Strategy

This project ships in three lanes (v0.3, v0.6, v1.0) as documented in [docs/implementation-roadmap.md](mdc:docs/implementation-roadmap.md). Use trunk-based development with short-lived feature branches mapped to roadmap cards, release branches at freeze, and semantic tags.

## Branches

- main: always stable, shippable; current lane focus (default v0.3). PRs merge here.
- release/vX.Y: cut when freezing a version (e.g., `release/v0.3`); accept only hotfixes/backports; tag from here.
- feature/CARD_ID-SLUG: short-lived per roadmap card. Examples:
  - feature/1.22-team-creation (v0.3)
  - feature/2.2-supabase-client (v0.6)
  - feature/3.1-realtime-sync (v1.0)
- epic/CARD_ID-SLUG: optional, time-boxed integration branch for multi-PR efforts; rebase often; close when merged.
- hotfix/vX.Y.Z: emergency fixes from release branches; back-merge or cherry-pick to main after tagging.

## Tags

- Semantic version tags: v0.3.0, v0.3.1, v0.6.0-alpha.1, etc.

## PR Hygiene

- Reference the roadmap card in the PR title/description (e.g., "1.xx: TITLE").
- Update and link docs under `docs/*` per the card’s Validation checklist before merge.
- Label PRs with the lane: v0.3, v0.6, or v1.0.
- Require green builds on pinned destinations (see [docs/systems/devx/build-and-ci.md](mdc:docs/systems/devx/build-and-ci.md)).

## Commands (copy/paste)

- Start a feature (template):

```bash
CARD_ID=1.22
CARD_TITLE="Team creation"
CARD_SLUG=$(echo "$CARD_TITLE" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g; s/^-|-$//g')
git switch -c feature/${CARD_ID}-${CARD_SLUG}
```

- Cut a release and tag:

```bash
git switch main && git pull
git tag -a v0.3.0 -m "v0.3.0" && git push origin v0.3.0
git switch -c release/v0.3 && git push -u origin release/v0.3
```

- Hotfix and back-merge:

```bash
git switch -c hotfix/v0.3.1 release/v0.3
# commit fix, open PR to release/v0.3, then after merge:
git tag -a v0.3.1 -m "v0.3.1" && git push origin v0.3.1
# back-merge to main (or cherry-pick) to keep histories aligned
```

## Mapping roadmap to branches

- v0.3 cards use `1.x` IDs → `feature/1.xx-<slug>`
- v0.6 cards use `2.x` IDs → `feature/2.xx-<slug>`
- v1.0 cards use `3.x` IDs → `feature/3.xx-<slug>`

## Agent automation (LLM-oriented)

- Card selection (dynamic):

  - Use `docs/implementation-roadmap.md` as the source of truth.
  - Follow the Automatic task selection policy in `docs/systems/devx/roadmap-governance.md`:
    - Active lane defaults to v0.3 unless the user specifies otherwise.
    - Consider only `status: Backlog` cards whose `dependencies` are all `Done`.
    - Order by `priority` (P0→P1→P2), then by `size` (S→M→L→XL), then by fewest dependencies, then lowest `id`.
    - Enforce WIP limits; if WIP is at limit, propose finishing/parking an In Progress card first.

- Branch naming (deterministic):

  - `feature/CARD_ID-SLUG` where SLUG is a kebab-case slug of the card title.
  - Template:

    ```bash
    CARD_ID=1.22
    CARD_TITLE="Team creation"
    CARD_SLUG=$(echo "$CARD_TITLE" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9]+/-/g; s/^-|-$//g')
    git switch -c feature/${CARD_ID}-${CARD_SLUG}
    ```

- PR hygiene (enforced):

  - Title: `${CARD_ID}: ${CARD_TITLE}`; label with lane derived from `CARD_ID` (1.x→v0.3, 2.x→v0.6, 3.x→v1.0).
  - Body links: card block from the roadmap, updated docs under `docs/*`, and relevant code paths.
  - Ensure deterministic build/test commands from the roadmap card are present and green on pinned destinations.

- Releases and hotfixes (generic):
  - Cut `release/vX.Y` when freezing a version; tag from the release branch.
  - Apply hotfixes on the corresponding `release/*`, tag, then back-merge (or cherry-pick) to `main`.
