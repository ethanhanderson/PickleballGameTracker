name: Issue ↔ Project Status Sync

on:
  issues:
    types: [labeled, unlabeled, edited, closed, reopened]
  workflow_dispatch:
  schedule:
    - cron: "23 3 * * *"

permissions:
  contents: read
  issues: write
  repository-projects: write

env:
  PROJECT_OWNER: ${{ vars.PROJECT_OWNER || github.repository_owner }}
  PROJECT_NUMBER: ${{ vars.PROJECT_NUMBER }}

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Resolve Project/Status identifiers
        id: ids
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GH_PROJECT_TOKEN }}
        run: |
          set -euo pipefail
          if [[ -z "${PROJECT_OWNER:-}" || -z "${PROJECT_NUMBER:-}" ]]; then
            echo "Missing PROJECT_OWNER/PROJECT_NUMBER repo variables" >&2
            exit 1
          fi
          if [[ -n "${{ vars.PROJECT_ID }}" ]]; then
            echo "project_id=${{ vars.PROJECT_ID }}" >> "$GITHUB_OUTPUT"
          else
            project_id=$(gh api graphql -f query='query($owner:String!, $number:Int!){ organization(login:$owner){ projectV2(number:$number){ id } } user(login:$owner){ projectV2(number:$number){ id } }}' -F owner="$PROJECT_OWNER" -F number="$PROJECT_NUMBER" --jq '.data.organization.projectV2.id // .data.user.projectV2.id')
            if [[ -z "$project_id" ]]; then echo "Failed to resolve ProjectV2 id" >&2; exit 1; fi
            echo "project_id=$project_id" >> "$GITHUB_OUTPUT"
          fi

          echo "status_field_id=${{ vars.STATUS_FIELD_ID }}" >> "$GITHUB_OUTPUT"
          echo "status_todo=${{ vars.STATUS_TODO_OPTION_ID }}" >> "$GITHUB_OUTPUT"
          echo "status_inprogress=${{ vars.STATUS_INPROGRESS_OPTION_ID }}" >> "$GITHUB_OUTPUT"
          echo "status_done=${{ vars.STATUS_DONE_OPTION_ID }}" >> "$GITHUB_OUTPUT"

      - name: From labels → set Project Status
        if: ${{ github.event_name == 'issues' }}
        env:
          GH_TOKEN: ${{ secrets.GH_PROJECT_TOKEN }}
        run: |
          set -euo pipefail
          issue_node_id='${{ github.event.issue.node_id }}'

          has_label() { echo "${{ toJson(github.event.issue.labels) }}" | jq -e --arg name "$1" '.[] | select(.name==$name) | .name' >/dev/null; }
          target_option=""
          if has_label 'status/done'; then target_option='${{ steps.ids.outputs.status_done }}'; fi
          if has_label 'status/in-progress'; then target_option='${{ steps.ids.outputs.status_inprogress }}'; fi
          if has_label 'status/todo'; then target_option='${{ steps.ids.outputs.status_todo }}'; fi

          if [[ -n "$target_option" && -n "${{ steps.ids.outputs.status_field_id }}" ]]; then
            # Find item id for this issue in the Project
            item_id=$(gh api graphql -f query='query($project:ID!){ node(id:$project){ ... on ProjectV2 { items(first:200){ nodes { id content { id } } } } } }' -F project='${{ steps.ids.outputs.project_id }}' --jq '.data.node.items.nodes[] | select(.content.id=="'${issue_node_id}'") | .id' | head -n1)
            if [[ -n "$item_id" ]]; then
              gh api graphql -f query='mutation($project:ID!, $item:ID!, $field:ID!, $option:String!){ updateProjectV2ItemFieldValue(input:{projectId:$project,itemId:$item,fieldId:$field,value:{singleSelectOptionId:$option}}){ projectV2Item { id } } }' \
                -F project='${{ steps.ids.outputs.project_id }}' -F item="$item_id" -F field='${{ steps.ids.outputs.status_field_id }}' -F option="$target_option" --silent || true
            fi
          fi

      - name: From closure → set Status Done
        if: ${{ github.event_name == 'issues' && github.event.action == 'closed' && vars.STATUS_DONE_OPTION_ID }}
        env:
          GH_TOKEN: ${{ secrets.GH_PROJECT_TOKEN }}
        run: |
          set -euo pipefail
          issue_node_id='${{ github.event.issue.node_id }}'
          item_id=$(gh api graphql -f query='query($project:ID!){ node(id:$project){ ... on ProjectV2 { items(first:200){ nodes { id content { id } } } } } }' -F project='${{ steps.ids.outputs.project_id }}' --jq '.data.node.items.nodes[] | select(.content.id=="'${issue_node_id}'") | .id' | head -n1)
          if [[ -n "$item_id" ]]; then
            gh api graphql -f query='mutation($project:ID!, $item:ID!, $field:ID!, $option:String!){ updateProjectV2ItemFieldValue(input:{projectId:$project,itemId:$item,fieldId:$field,value:{singleSelectOptionId:$option}}){ projectV2Item { id } } }' \
              -F project='${{ steps.ids.outputs.project_id }}' -F item="$item_id" -F field='${{ steps.ids.outputs.status_field_id }}' -F option='${{ steps.ids.outputs.status_done }}' --silent || true
          fi
